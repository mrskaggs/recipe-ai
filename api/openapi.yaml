openapi: 3.0.3
info:
  title: Recipe API
  description: A REST API for managing recipes with ingredients, instructions, and nutritional information
  version: 1.0.0
  contact:
    name: Recipe API Support
servers:
  - url: http://localhost:3001
    description: Local development server
  - url: http://192.168.40.142:3001
    description: Production server

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      description: Create a new user account with email, password, and optional username
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      summary: Login user
      description: Authenticate user with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/refresh:
    post:
      summary: Refresh access token
      description: Get a new access token using a valid refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: Valid refresh token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token refreshed successfully"
                  token:
                    type: string
                    description: New access token
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/me:
    get:
      summary: Get current user profile
      description: Retrieve the current authenticated user's profile information
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update current user profile
      description: Update the current authenticated user's profile information
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: New username
                email:
                  type: string
                  format: email
                  description: New email address
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile updated successfully"
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/change-password:
    post:
      summary: Change password
      description: Change the current authenticated user's password
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  description: Current password
                newPassword:
                  type: string
                  minLength: 6
                  description: New password (minimum 6 characters)
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password changed successfully"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication required or invalid current password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health:
    get:
      summary: Health check
      description: Check if the API is running and healthy
      tags:
        - Health
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "Recipe API is running"

  /api/recipes:
    get:
      summary: Get all recipes
      description: Retrieve a list of all recipes with their ingredients, instructions, and tags
      tags:
        - Recipes
      responses:
        '200':
          description: List of recipes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new recipe
      description: Create a new recipe with ingredients, instructions, and nutritional information
      tags:
        - Recipes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/RecipeInput'
                - type: array
                  items:
                    type: object
                    properties:
                      output:
                        $ref: '#/components/schemas/RecipeInput'
            examples:
              direct:
                summary: Direct recipe input
                value:
                  title: "Chicken Stir Fry"
                  servings: 4
                  ingredients: ["1 lb chicken breast", "2 cups broccoli", "1 bell pepper"]
                  instructions: ["Cut chicken into pieces", "Stir fry chicken", "Add vegetables"]
                  macros_per_serving:
                    calories: 350
                    protein_g: 35
                    carbs_g: 15
                    fat_g: 12
                  tags: ["chicken", "stir-fry", "healthy"]
                  notes: "Quick and easy dinner recipe"
              n8n:
                summary: n8n workflow format
                value:
                  - output:
                      title: "Chicken Stir Fry"
                      servings: 4
                      ingredients: ["1 lb chicken breast", "2 cups broccoli", "1 bell pepper"]
                      instructions: ["Cut chicken into pieces", "Stir fry chicken", "Add vegetables"]
                      macros_per_serving:
                        calories: 350
                        protein_g: 35
                        carbs_g: 15
                        fat_g: 12
                      tags: ["chicken", "stir-fry", "healthy"]
                      notes: "Quick and easy dinner recipe"
      responses:
        '201':
          description: Recipe created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Recipe created successfully"
                  recipeId:
                    type: integer
                    example: 123
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/recipes/{id}:
    get:
      summary: Get recipe by ID
      description: Retrieve a specific recipe by its ID
      tags:
        - Recipes
      parameters:
        - name: id
          in: path
          required: true
          description: Recipe ID
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Recipe retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '404':
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/social/recipes/{recipeId}/comments:
    get:
      summary: Get comments for a recipe
      description: Retrieve all comments (threaded) for a specific recipe
      tags:
        - Social
        - Comments
      parameters:
        - name: recipeId
          in: path
          required: true
          description: Recipe ID
          schema:
            type: integer
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Comments per page
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
                  totalPages:
                    type: integer

    post:
      summary: Create a comment
      description: Post a new comment or reply to an existing comment
      tags:
        - Social
        - Comments
      parameters:
        - name: recipeId
          in: path
          required: true
          description: Recipe ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  maxLength: 1000
                parentId:
                  type: integer
                  description: Parent comment ID for replies
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid input
        '403':
          description: Blocked from commenting

  /api/social/comments/{commentId}:
    put:
      summary: Update a comment
      description: Edit an existing comment (owners only)
      tags:
        - Social
        - Comments
      parameters:
        - name: commentId
          in: path
          required: true
          description: Comment ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  maxLength: 1000
      responses:
        '200':
          description: Comment updated successfully
        '403':
          description: Not authorized to edit

    delete:
      summary: Delete a comment
      description: Delete a comment (owners or admins)
      tags:
        - Social
        - Comments
      parameters:
        - name: commentId
          in: path
          required: true
          description: Comment ID
          schema:
            type: integer
      responses:
        '200':
          description: Comment deleted successfully
        '403':
          description: Not authorized to delete

  /api/social/reports:
    post:
      summary: Report content
      description: Report inappropriate content (comments, chat messages, profiles)
      tags:
        - Social
        - Moderation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - contentType
                - contentId
                - reason
              properties:
                contentType:
                  type: string
                  enum: ['comment', 'chat_message', 'profile', 'other']
                contentId:
                  type: integer
                reason:
                  type: string
                  enum: ['spam', 'harassment', 'inappropriate', 'offensive', 'other']
                description:
                  type: string
      responses:
        '201':
          description: Report submitted successfully

    get:
      summary: Get reports (admin only)
      description: Retrieve pending reports for admin review
      tags:
        - Social
        - Moderation
        - Admin
      responses:
        '200':
          description: Reports retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  reports:
                    type: array
                    items:
                      $ref: '#/components/schemas/Report'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
                  totalPages:
                    type: integer

  /api/social/recipes/{recipeId}/suggestions:
    get:
      summary: Get recipe suggestions
      description: Retrieve user-submitted suggestions for recipe improvements
      tags:
        - Social
        - Suggestions
      parameters:
        - name: recipeId
          in: path
          required: true
          description: Recipe ID
          schema:
            type: integer
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Suggestions per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Suggestions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggestions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Suggestion'
                  total:
                    type: integer

    post:
      summary: Create a suggestion
      description: Submit a suggestion for recipe improvement
      tags:
        - Social
        - Suggestions
      parameters:
        - name: recipeId
          in: path
          required: true
          description: Recipe ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - description
              properties:
                title:
                  type: string
                description:
                  type: string
                  maxLength: 2000
                suggestionType:
                  type: string
                  enum: ['improvement', 'variation', 'correction']
                  default: 'improvement'
      responses:
        '201':
          description: Suggestion created successfully

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique user identifier
          example: 1
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        username:
          type: string
          description: User's display name
          example: "johndoe"
        role:
          type: string
          enum: ["admin", "user"]
          description: User role for access control
          example: "user"
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2025-01-15T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Account last update timestamp
          example: "2025-01-15T10:00:00Z"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        password:
          type: string
          description: User password
          example: "password123"

    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        password:
          type: string
          minLength: 6
          description: User password (minimum 6 characters)
          example: "password123"
        username:
          type: string
          description: Optional display name
          example: "johndoe"

    AuthResponse:
      type: object
      properties:
        message:
          type: string
          description: Response message
          example: "Login successful"
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: JWT refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    Recipe:
      type: object
      properties:
        id:
          type: integer
          description: Unique recipe identifier
          example: 1
        title:
          type: string
          description: Recipe title
          example: "Chicken Stir Fry"
        servings:
          type: integer
          description: Number of servings
          example: 4
        calories:
          type: integer
          description: Calories per serving
          example: 350
        protein_g:
          type: number
          description: Protein in grams per serving
          example: 35.0
        carbs_g:
          type: number
          description: Carbohydrates in grams per serving
          example: 15.0
        fat_g:
          type: number
          description: Fat in grams per serving
          example: 12.0
        notes:
          type: string
          description: Additional notes about the recipe
          example: "Quick and easy dinner recipe"
        ingredients:
          type: array
          description: List of ingredients
          items:
            type: string
          example: ["1 lb chicken breast", "2 cups broccoli", "1 bell pepper"]
        instructions:
          type: array
          description: Step-by-step cooking instructions
          items:
            type: string
          example: ["Cut chicken into pieces", "Stir fry chicken", "Add vegetables"]
        tags:
          type: array
          description: Recipe tags for categorization
          items:
            type: string
          example: ["chicken", "stir-fry", "healthy"]
        created_at:
          type: string
          format: date-time
          description: Recipe creation timestamp
          example: "2023-12-01T10:00:00Z"

    RecipeInput:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: Recipe title
          example: "Chicken Stir Fry"
        servings:
          type: integer
          description: Number of servings
          default: 1
          example: 4
        ingredients:
          type: array
          description: List of ingredients
          items:
            type: string
          example: ["1 lb chicken breast", "2 cups broccoli", "1 bell pepper"]
        instructions:
          type: array
          description: Step-by-step cooking instructions
          items:
            type: string
          example: ["Cut chicken into pieces", "Stir fry chicken", "Add vegetables"]
        macros_per_serving:
          type: object
          description: Nutritional information per serving
          properties:
            calories:
              type: integer
              description: Calories per serving
              example: 350
            protein_g:
              type: number
              description: Protein in grams per serving
              example: 35.0
            carbs_g:
              type: number
              description: Carbohydrates in grams per serving
              example: 15.0
            fat_g:
              type: number
              description: Fat in grams per serving
              example: 12.0
        tags:
          type: array
          description: Recipe tags for categorization
          items:
            type: string
          example: ["chicken", "stir-fry", "healthy"]
        notes:
          type: string
          description: Additional notes about the recipe
          example: "Quick and easy dinner recipe"

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Internal server error"

    Comment:
      type: object
      properties:
        id:
          type: integer
        recipeId:
          type: integer
        parentId:
          type: integer
          description: null for top-level comments
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        author:
          type: object
          properties:
            id:
              type: integer
            displayName:
              type: string
            role:
              type: string
              enum: ['admin', 'user']
        replyCount:
          type: integer
          description: Number of replies to this comment
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    Report:
      type: object
      properties:
        id:
          type: integer
        contentType:
          type: string
          enum: ['comment', 'chat_message', 'profile', 'other']
        contentId:
          type: integer
        reason:
          type: string
          enum: ['spam', 'harassment', 'inappropriate', 'offensive', 'other']
        description:
          type: string
        status:
          type: string
          enum: ['pending', 'investigating', 'resolved', 'dismissed']
        createdAt:
          type: string
          format: date-time
        reporter:
          type: object
          properties:
            id:
              type: integer
            displayName:
              type: string
        reportedUser:
          type: object
          properties:
            id:
              type: integer
            displayName:
              type: string

    Suggestion:
      type: object
      properties:
        id:
          type: integer
        recipeId:
          type: integer
        title:
          type: string
        description:
          type: string
        suggestionType:
          type: string
          enum: ['improvement', 'variation', 'correction']
        status:
          type: string
          enum: ['pending', 'accepted', 'rejected', 'implemented']
        createdAt:
          type: string
          format: date-time
        author:
          type: object
          properties:
            id:
              type: integer
            displayName:
              type: string
            role:
              type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication (if implemented)
